{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/rawboy/Downloads/property-final--master/src/app/api/property-categories/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport mongoose from 'mongoose';\n\nconst MONGODB_URI = 'mongodb+srv://solankiish25:1234@cluster0.hvuwzyq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';\nconst DB_NAME = 'test';\n\nlet isConnected = false;\nasync function connectDB() {\n  if (isConnected) return;\n  await mongoose.connect(MONGODB_URI, { dbName: DB_NAME });\n  isConnected = true;\n}\n\nconst categorySchema = new mongoose.Schema({\n  name: { type: String, required: true, unique: true },\n}, { timestamps: true });\n\nconst Category = mongoose.models.PropertyCategory || mongoose.model('PropertyCategory', categorySchema, 'propertycategories');\n\n// Ensure default categories exist\nasync function ensureDefaultCategories() {\n  const defaults = ['Residential', 'Commercial'];\n  for (const name of defaults) {\n    const exists = await Category.findOne({ name });\n    if (!exists) {\n      await Category.create({ name });\n    }\n  }\n}\n\nexport async function GET() {\n  try {\n    await connectDB();\n    await ensureDefaultCategories();\n    const categories = await Category.find().sort({ createdAt: -1 });\n    return NextResponse.json({ success: true, categories });\n  } catch (error) {\n    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectDB();\n    const { name } = await req.json();\n    if (!name) return NextResponse.json({ success: false, message: 'Name is required' }, { status: 400 });\n    const existing = await Category.findOne({ name });\n    if (existing) return NextResponse.json({ success: false, message: 'Category already exists' }, { status: 400 });\n    const category = await Category.create({ name });\n    return NextResponse.json({ success: true, category });\n  } catch (error) {\n    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function PUT(req: NextRequest) {\n  try {\n    await connectDB();\n    const { id, name } = await req.json();\n    if (!id || !name) return NextResponse.json({ success: false, message: 'ID and name are required' }, { status: 400 });\n    const existing = await Category.findOne({ name });\n    if (existing) return NextResponse.json({ success: false, message: 'Category name already exists' }, { status: 400 });\n    const updated = await Category.findByIdAndUpdate(id, { name }, { new: true });\n    if (!updated) return NextResponse.json({ success: false, message: 'Category not found' }, { status: 404 });\n    return NextResponse.json({ success: true, category: updated });\n  } catch (error) {\n    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: NextRequest) {\n  try {\n    await connectDB();\n    const { id } = await req.json();\n    if (!id) return NextResponse.json({ success: false, message: 'ID is required' }, { status: 400 });\n    const deleted = await Category.findByIdAndDelete(id);\n    if (!deleted) return NextResponse.json({ success: false, message: 'Category not found' }, { status: 404 });\n    return NextResponse.json({ success: true, message: 'Category deleted' });\n  } catch (error) {\n    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}