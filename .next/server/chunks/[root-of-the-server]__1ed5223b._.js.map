{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/ishas/Downloads/property/src/app/api/auth/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst MONGODB_URI = 'mongodb+srv://solankiish25:1234@cluster0.hvuwzyq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';\nconst DB_NAME = 'test';\n\n// Connect to MongoDB\nlet isConnected = false;\nasync function connectDB() {\n  if (isConnected) return;\n  await mongoose.connect(MONGODB_URI, { dbName: DB_NAME });\n  isConnected = true;\n}\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  email: String,\n  password: String, // hashed\n});\nconst User = mongoose.models.AdminUser || mongoose.model('AdminUser', userSchema, 'adminusers');\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectDB();\n    const { email, password } = await req.json();\n    if (!email || !password) {\n      return NextResponse.json({ success: false, message: 'Missing credentials' }, { status: 400 });\n    }\n    const user = await User.findOne({ email });\n    if (!user) {\n      return NextResponse.json({ success: false, message: 'User not found' }, { status: 401 });\n    }\n    // Plain text password comparison\n    if (password !== user.password) {\n      return NextResponse.json({ success: false, message: 'Invalid password' }, { status: 401 });\n    }\n    return NextResponse.json({ success: true, message: 'Login successful' });\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAGA,MAAM,cAAc;AACpB,MAAM,UAAU;AAEhB,qBAAqB;AACrB,IAAI,cAAc;AAClB,eAAe;IACb,IAAI,aAAa;IACjB,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;QAAE,QAAQ;IAAQ;IACtD,cAAc;AAChB;AAEA,cAAc;AACd,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;IACP,UAAU;AACZ;AACA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,SAAS,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,aAAa,YAAY;AAE3E,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM;QACN,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QACA,MAAM,OAAO,MAAM,KAAK,OAAO,CAAC;YAAE;QAAM;QACxC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxF;QACA,iCAAiC;QACjC,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAS;QAAmB;IACxE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/F;AACF","debugId":null}}]
}